"A response from user api"
type userQuery {
  success: Boolean!
  data: User!
}

"A user data"
type User {
  uid: String!
  nombres: String!
  email: String!
  url_imagen: String
  fecha_registro: String
  fecha_nacimiento: String
  rol: String
}

type Store {
  id_tienda: Int!
  uid: String!
  nombre: String
  fecha_suscripcion: String!
  direccion: String
  descripcion: String
  foto_tienda: String
  enlace: String
}

type DeleteHistorialResponse {
  success: Boolean!
  data: DeleteMiddleHistorialResponse
}

type DeleteMiddleHistorialResponse{ 
  success: Boolean,
  message : String,
  data: DeleteMiddleLowHistorialResponse
}

type DeleteMiddleLowHistorialResponse{
  success: Boolean,
  message : String
}

type CreateHistorialResponse {
  success: Boolean!
  data: CreateMiddleHistorialResponse
}

type CreateMiddleHistorialResponse{ 
  success: Boolean,
  message : String,
  id: String
}

type HistorialResponse {
  success: Boolean!
  data: HistorialMiddleResponse
}

union HistorialData = HistorialConsumption | HistorialSearch

type HistorialMiddleResponse {
  success: Boolean!
  data: [HistorialData]
}

type HistorialConsumption {
  id: ID!
  uid: String
  id_producto: String
  fecha_consumo: String
  cantidad_consumida: Int
  nutrientes_ingeridos: String
  activo: Boolean
}

type HistorialSearch {
  id: ID!
  uid: String
  id_producto: String
  fecha_busqueda: String
  id_tienda: String,
  redireccion_tienda: Boolean,
  activo: Boolean
}

type Search {
  id: ID!
  fecha_busqueda: String
  id_producto: String
  redireccion_tienda: Boolean
  id_tienda: String
  activo: Boolean
}

type UserDays {
  uid: String!
  days: Int!
}

type UserRecord{
  uid: String!
  recordId: String!
}


"A particular intergalactic location available for booking"
type Listing {
  id: ID!
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "Indicates whether listing is closed for bookings (on hiatus)"
  closedForBookings: Boolean
  "The amenities available for this listing"
  amenities: [Amenity!]!
}

type Amenity {
  id: ID!
  "The amenity category the amenity belongs to"
  category: String!
  "The amenity's name"
  name: String!
}

type Query {
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]!
  "Returns the details about this listing"
  listing(id: ID!): Listing
  "returns user query object"
  userQuery(id: ID!): userQuery
  "Returns list of all stores"
  getStores: [Store]
  getProducts: [Product]!
  getProduct(id: ID!): Product
  getProductsByName(name: String!): [Product]
  getProductByStore(storeId: Int): [Product]
  getStoreByUser(id:String):[Store]
  getProductByUser(id:String):[Product]
  getGetProductAndStore(id:String):[Store]
  getInfoOff(id:String):ProductoOff
  getHistorialSearchWithLimit(uid:String, limit: Int): HistorialResponse
  getAllHistorialSearch(uid:String): HistorialResponse
  getHistorialSearchByDay(uid:String, days: Int): HistorialResponse
  getAllHistorialConsumption(id: ID!): HistorialResponse
  getHistorialConsumptionByDay(id: ID!, days : Int): HistorialResponse
}

type Mutation {
  "Creates a new listing"
  createListing(input: CreateListingInput!): CreateListingResponse!
  "creates a user"
  createUser(input: CreateUserInput!): CreateUserResponse!
  createStore(input: CreateStoreInput!): CreateUserResponse!
  updateStore(input: UpdateStoreInput!): CreateUserResponse!
  deleteStore(id: Int!): CreateUserResponse!
  createProduct(input: CreateProductInput!): CreateUserResponse!
  updateUser(input: CreateUserInput!): CreateUserResponse!
  addHistorialSearch(input: CreateSearchInput!): CreateHistorialResponse!
  addHistorialConsumption(input: CreateHistorialInput!): CreateHistorialResponse!
  deleteHistorialConsumption(uid: ID, recordId: ID): DeleteHistorialResponse!
  deleteHistorialSearch(uid: ID, recordId: ID): DeleteHistorialResponse!
}

input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "Indicates whether listing is closed for bookings (on hiatus)"
  closedForBookings: Boolean
  "The Listing's amenities"
  amenities: [ID!]!
}

type CreateListingResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  listing: Listing
}

input CreateUserInput {
  uid: String!
  nombres: String
  email: String
  url_imagen: String
  fecha_registro: String
  fecha_nacimiento: String
  rol: String
}

input CreateStoreInput {
  uid: String!
  nombre: String
  direccion: String
  descripcion: String
  foto_tienda: String
  enlace: String
}

input UpdateStoreInput {
  id_tienda: Int!
  uid: String
  nombre: String
  direccion: String
  descripcion: String
  foto_tienda: String
  enlace: String
}

input CreateProductInput {
  id_producto:ID
  referencia: String
  nombre: String
  descripcion: String
  url_imagen: String
  created_at:String
  updated_at:String
}

type NutrientesIngeridos {
  carbohidaratos: Int
  liquido: Int
}

input NutrientesIngeridosInput {
  carbohidaratos: Int
  liquido: Int
}

input CreateHistorialInput {
  uid: String
  id_producto: String
  fecha_consumo: String
  cantidad_consumida: Int
  nutrientes_ingeridos: String
  activo: Boolean
}

input CreateSearchInput {
  uid: String!
  fecha_busqueda: String
  id_producto: String
  redireccion_tienda: Boolean
  id_tienda: String
  activo: Boolean
}

type CreateUserResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

type Product {
  id_producto:ID
  referencia: String
  nombre: String
  descripcion: String
  url_imagen: String
  created_at:String
  updated_at:String
}

type ProductData {
  referencia: String!
  nombre: String
  foto:  String
  categorias: [String]
  nutriscore: String
}

type infoProducto {
  carbohidratos: Float
  unidadCarbohidratos: String
  grasas: Float
  unidadGrasas: String
  grasaSaturada: Float
  unidadGrasaSaturada: String
  azucar: Float
  unidadAzucar: String
  proteina: Float
  unidadProteina: String
  sodio: Float
  unidadSodio: String
  fibra: Float
  unidadFibra: String
  energia: Float
  unidadEnergia: String
  cantidad: String
  unidadCantidad: String
  imagenFrontalUrl: String
  nivelesAltos: [String]
}

type ProductoOff{
  producto: ProductData
  infoProducto: infoProducto
}
